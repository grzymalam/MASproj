// <auto-generated />
using System;
using Infrastructure.Data.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Api.Migrations
{
    [DbContext(typeof(RentalDbContext))]
    [Migration("20230622110406_AddedLocationToEmpFix")]
    partial class AddedLocationToEmpFix
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Models.Client.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("AmountOwed")
                        .HasColumnType("float");

                    b.Property<double>("AmountPaid")
                        .HasColumnType("float");

                    b.Property<string>("ClientType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Clients");

                    b.HasDiscriminator<string>("ClientType").HasValue("Client");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Domain.Models.ClientsLocation", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("TimeJoined")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("TimeLeft")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("LocationId");

                    b.ToTable("ClientLocations");
                });

            modelBuilder.Entity("Domain.Models.Employees.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EmployedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmployeeType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("HourlyWage")
                        .HasColumnType("float");

                    b.Property<long>("HoursWorked")
                        .HasColumnType("bigint");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pesel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("Employees");

                    b.HasDiscriminator<string>("EmployeeType").HasValue("Employee");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Domain.Models.Equipment.EquipmentAccessory", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsRented")
                        .HasColumnType("bit");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("PricePerDay")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("EquipmentAccessories");
                });

            modelBuilder.Entity("Domain.Models.Equipment.PieceOfEquipment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateOfPurchase")
                        .HasColumnType("datetime2");

                    b.Property<string>("EquipmentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastInspection")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Mass")
                        .HasColumnType("float");

                    b.Property<double>("Mileage")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("PricePerDay")
                        .HasColumnType("float");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("PiecesOfEquipment");

                    b.HasDiscriminator<string>("EquipmentType").HasValue("PieceOfEquipment");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Domain.Models.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("StreetNumber")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("Domain.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("OrderDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("PieceOfEquipmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TransportId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("PieceOfEquipmentId");

                    b.HasIndex("TransportId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Domain.Models.Rental", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Cost")
                        .HasColumnType("float");

                    b.Property<DateTime>("End")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("SalesmanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SalesmanId");

                    b.ToTable("Rentals");
                });

            modelBuilder.Entity("Domain.Models.Transport", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateOfDeparture")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FromId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ToId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FromId");

                    b.HasIndex("ToId");

                    b.ToTable("Transports");
                });

            modelBuilder.Entity("EquipmentAccessoryPieceOfEquipment", b =>
                {
                    b.Property<Guid>("FitsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FitsId1")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FitsId", "FitsId1");

                    b.HasIndex("FitsId1");

                    b.ToTable("EquipmentAccessoryPieceOfEquipment");
                });

            modelBuilder.Entity("EquipmentAccessoryRental", b =>
                {
                    b.Property<Guid>("AccessoriesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RentedInId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AccessoriesId", "RentedInId");

                    b.HasIndex("RentedInId");

                    b.ToTable("EquipmentAccessoryRental");
                });

            modelBuilder.Entity("PieceOfEquipmentRental", b =>
                {
                    b.Property<Guid>("EquipmentRentedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RentalsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("EquipmentRentedId", "RentalsId");

                    b.HasIndex("RentalsId");

                    b.ToTable("PieceOfEquipmentRental");
                });

            modelBuilder.Entity("Domain.Models.Client.BusinessClient", b =>
                {
                    b.HasBaseType("Domain.Models.Client.Client");

                    b.Property<double>("Discount")
                        .HasColumnType("float");

                    b.Property<string>("NIP")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("BusinessClient");
                });

            modelBuilder.Entity("Domain.Models.Client.PersonalClient", b =>
                {
                    b.HasBaseType("Domain.Models.Client.Client");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pesel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("PersonalClient");
                });

            modelBuilder.Entity("Domain.Models.Employees.Mechanic", b =>
                {
                    b.HasBaseType("Domain.Models.Employees.Employee");

                    b.Property<long>("AmountOfRepairedEquipmentPieces")
                        .HasColumnType("bigint");

                    b.Property<int>("ExperienceLevel")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("Mechanic");
                });

            modelBuilder.Entity("Domain.Models.Employees.Salesman", b =>
                {
                    b.HasBaseType("Domain.Models.Employees.Employee");

                    b.Property<long>("AmountOfRentedPiecesOfEquipment")
                        .HasColumnType("bigint");

                    b.HasDiscriminator().HasValue("Salesman");
                });

            modelBuilder.Entity("Domain.Models.Equipment.DumpTruck", b =>
                {
                    b.HasBaseType("Domain.Models.Equipment.PieceOfEquipment");

                    b.Property<int>("LoadCapacity")
                        .HasColumnType("int");

                    b.Property<int>("MaxSpeed")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("DumpTruck");
                });

            modelBuilder.Entity("Domain.Models.Equipment.Excavator", b =>
                {
                    b.HasBaseType("Domain.Models.Equipment.PieceOfEquipment");

                    b.Property<double>("ArmLength")
                        .HasColumnType("float");

                    b.Property<bool>("IsTracked")
                        .HasColumnType("bit");

                    b.HasDiscriminator().HasValue("Excavator");
                });

            modelBuilder.Entity("Domain.Models.Equipment.Loader", b =>
                {
                    b.HasBaseType("Domain.Models.Equipment.PieceOfEquipment");

                    b.Property<int>("LoaderType")
                        .HasColumnType("int");

                    b.Property<double>("Width")
                        .HasColumnType("float");

                    b.HasDiscriminator().HasValue("Loader");
                });

            modelBuilder.Entity("Domain.Models.ClientsLocation", b =>
                {
                    b.HasOne("Domain.Models.Client.Client", "Client")
                        .WithMany("ClientsLocations")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Location", "Location")
                        .WithMany("ClientLocations")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Domain.Models.Employees.Employee", b =>
                {
                    b.HasOne("Domain.Models.Location", "Location")
                        .WithMany("Employees")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Domain.Models.Equipment.EquipmentAccessory", b =>
                {
                    b.HasOne("Domain.Models.Location", "Location")
                        .WithMany("EquipmentAccessories")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Domain.Models.Equipment.PieceOfEquipment", b =>
                {
                    b.HasOne("Domain.Models.Location", "Location")
                        .WithMany("PiecesOfEquipment")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Domain.Models.Order", b =>
                {
                    b.HasOne("Domain.Models.Client.Client", "Client")
                        .WithMany("Orders")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Equipment.PieceOfEquipment", "PieceOfEquipment")
                        .WithMany("Orders")
                        .HasForeignKey("PieceOfEquipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Transport", "Transport")
                        .WithMany("Orders")
                        .HasForeignKey("TransportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("PieceOfEquipment");

                    b.Navigation("Transport");
                });

            modelBuilder.Entity("Domain.Models.Rental", b =>
                {
                    b.HasOne("Domain.Models.Employees.Salesman", "Salesman")
                        .WithMany("Rentals")
                        .HasForeignKey("SalesmanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Salesman");
                });

            modelBuilder.Entity("Domain.Models.Transport", b =>
                {
                    b.HasOne("Domain.Models.Location", "From")
                        .WithMany()
                        .HasForeignKey("FromId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Models.Location", "To")
                        .WithMany()
                        .HasForeignKey("ToId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("From");

                    b.Navigation("To");
                });

            modelBuilder.Entity("EquipmentAccessoryPieceOfEquipment", b =>
                {
                    b.HasOne("Domain.Models.Equipment.EquipmentAccessory", null)
                        .WithMany()
                        .HasForeignKey("FitsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Equipment.PieceOfEquipment", null)
                        .WithMany()
                        .HasForeignKey("FitsId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EquipmentAccessoryRental", b =>
                {
                    b.HasOne("Domain.Models.Equipment.EquipmentAccessory", null)
                        .WithMany()
                        .HasForeignKey("AccessoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Rental", null)
                        .WithMany()
                        .HasForeignKey("RentedInId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PieceOfEquipmentRental", b =>
                {
                    b.HasOne("Domain.Models.Equipment.PieceOfEquipment", null)
                        .WithMany()
                        .HasForeignKey("EquipmentRentedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Rental", null)
                        .WithMany()
                        .HasForeignKey("RentalsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.Client.Client", b =>
                {
                    b.Navigation("ClientsLocations");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Domain.Models.Equipment.PieceOfEquipment", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Domain.Models.Location", b =>
                {
                    b.Navigation("ClientLocations");

                    b.Navigation("Employees");

                    b.Navigation("EquipmentAccessories");

                    b.Navigation("PiecesOfEquipment");
                });

            modelBuilder.Entity("Domain.Models.Transport", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Domain.Models.Employees.Salesman", b =>
                {
                    b.Navigation("Rentals");
                });
#pragma warning restore 612, 618
        }
    }
}
